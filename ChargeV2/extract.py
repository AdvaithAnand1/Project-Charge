import pandas as pd
import datetime
import network, store

# TEMPORARY
def extractActiveTime():
    # find a way to extract or analyze trends to find the active time of the user
    # worst case make this a user modifiable thing in a UI
    return None

# TEMPORARY
def getChargeTime():
    # find a way to predict how long it would take a device to charge from a specific percentage to full
    # try using sklearn to analyze the trends in the html we are extracting from
    return 2

def checkExtracted():
    # get the date that the information was last extracted in and check whether it is within the range we want
    lastdate = datetime.date.fromisoformat(store.getLine("data", 8))
    date = datetime.date.today()
    if ((date - lastdate).days > 7):
        return False
    else:
        return True
def extractAll():
    # extract all of the necessary information from the report generated by windows
    # store a new extraction date
    extractActiveTime()
    network.save(r"C:\Windows\System32\battery-report.html")
    store.store("data", 7, str(datetime.date.today()))
def getTable(file_path):
    # extract the tables from the html file generated by windows
    history = pd.read_html(file_path)[2]

    # remove the unnecessary information
    history = history[history['STATE'] != 'Suspended'].drop(["CAPACITY REMAINING.1", "STATE"], axis = 1)
    
    # use a map to reassign the charging status to a numerical form and chopping off the rightside characters
    map = {
        "AC": 1,
        "Battery": 0
    }
    history["SOURCE"] = history["SOURCE"].map(map).astype(float)
    history["CAPACITY REMAINING"] = history["CAPACITY REMAINING"].str[:-2].astype(float)

    # convert the date and time to a single number thorugh basic calculation and remap the days of the eweek
    dt_full = pd.to_datetime(history['START TIME'], errors = "coerce")
    history["DATE"] = dt_full.dt.day_name().ffill()
    history['TIME'] = pd.to_datetime(history['START TIME'], format = "mixed")
    map2 = {
        "Sunday": 1,
        "Monday": 2,
        "Tuesday": 3,
        "Wednesday": 4,
        "Thursday": 5,
        "Friday": 6,
        "Saturday": 7
    }
    history = history.drop("START TIME", axis = 1)
    history["DATE"] = history["DATE"].map(map2).astype(float)
    history["TIME"] = history["TIME"].dt.second + history["TIME"].dt.minute * 60 + history["TIME"].dt.hour * 3600
    history["DATE"] /= 7
    history["TIME"] /= 24 * 3600
    history["CAPACITY REMAINING"] /= 100

    # return the normalized table
    return history